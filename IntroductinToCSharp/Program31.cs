using System;

interface IOne
{
    void InterfaceMethod();
    void InterfaceMethod2();
    void InterfaceMethod3();
}

interface ITwo
{
    void InterfaceMethod();
    void InterfaceMethod2();
    void InterfaceMethod3();
}

// class inherits from 2 interfaces 
// each interface has a method named "InterfaceMethod()" with the same signatures
class Program31 : IOne, ITwo
{
    static void Main()
    {
        Program31 P = new Program31();

        // this works but is ambiguous, which method are we referencing?
        P.InterfaceMethod();  

        // we can use casting to specify which method we are referencing
        // this doesnt make much sense though since our class only has 1 implementation of the method
        ((IOne)P).InterfaceMethod();
        ((ITwo)P).InterfaceMethod();

        // reference an explicitally implemented a interface method
        // cant use "<class reference variable>." reference (ex: "P.", need to cast to reference explicitally
        ((IOne)P).InterfaceMethod2();
        ((ITwo)P).InterfaceMethod2();

        // if we dont want to type case (above) to reference explicitally implemented methods,
        // then we can also do this
        IOne i1 = new Program31();
        ITwo i2 = new Program31();
        i1.InterfaceMethod2();
        i2.InterfaceMethod2();

        // how to call implemented methods when there is a DEFAULT method
        P.InterfaceMethod3();
        ((ITwo)P).InterfaceMethod3();
    }

    // this class provides an implementation for the interface method
    public void InterfaceMethod()
    {
        Console.WriteLine("IOne\\ITwo Interface Method...");

        // comment out code generated by VS
        //throw new NotImplementedException();
    }

    // explicitally implement an interface method
    // need to remove "public" access modifier, they are not allowed for explicit implemented interface members
    // need to add "<interface name>." to method reference
    void IOne.InterfaceMethod2()
    {
        Console.WriteLine("IOne Interface Method 2...");

        // comment out code generated by VS
        //throw new NotImplementedException();
    }

    // new we need to also explicitally refernce the ITwo method
    void ITwo.InterfaceMethod2()
    {
        Console.WriteLine("ITwo Interface Method 2...");

        // comment out code generated by VS
        //throw new NotImplementedException();
    }

    // we can have a default interface implementation
    // we do this by implementing one method normally and the other explicitally
    public void InterfaceMethod3()
    {
        Console.WriteLine("Default Interface Method 3...");

        // comment out code generated by VS
        //throw new NotImplementedException();
    }
    void ITwo.InterfaceMethod3()
    {
        Console.WriteLine("ITwo Interface Method 3...");

        // comment out code generated by VS
        //throw new NotImplementedException();
    }

}

