using System;

public struct Customer28
{
    private int _id;

    // to create a Name property, we can use VS
    // 1. highlight "private string _name;" line below
    // 2. right-click, choose Refactor -> Encapsulate Field...
    private string _name;

    // the code for this property was generated by VS (see above)
    public string Name
    {
        get { return _name; }
        set { _name = value; }
    }

    // i manually coded this property
    public int Id
    {
        get { return this._id; }
        set { this._id = value; }
    }

    // structure constructor
    public Customer28(int Id, string Name)
    {
        this._id = Id;
        this._name = Name;
    }

    // structure method
    public void PrintDetails()
    {
        Console.WriteLine("Id = {0} && Name = {1}", this._id, this._name);
    }
}

class Program28
{
    static void Main()
    {
        // create instance of the structure
        Customer28 C1 = new Customer28(4, "Roberto");
        C1.PrintDetails();
        // Id = 4 && Name = Roberto

        // if we run this code, we print blank values because we never intiailzed the fields being printed
        // we are using the default constructor in this example
        Customer28 C2 = new Customer28();
        C2.PrintDetails();
        // Id = 0 && Name =

        // we can use a method similar to the above and manually initialize fields via setting properties
        Customer28 C3 = new Customer28();
        C3.Id = 8;
        C3.Name = "Bobbio";
        C3.PrintDetails();
        // Id = 8 && Name = Bobbio

        // C# 3.0 introduced new syntax to create an instance of a class and/or struct  
        // its called "object initializer" syntax
        Customer28 C4 = new Customer28
        {
            Id = 48,
            Name = "El bobbio"
        };
        C4.PrintDetails();
        // Id = 48 && Name = El bobbio
    }
}

