using System;

// common interface naming convention is to prefix name with "I"
interface ICustomer30
{
    // interface method 
    void Print();
    // you cannot actually implement any code in an interface
    // you can only have interface member declarations
    //{
    //    Console.WriteLine("Hello World");
    //}

    // interface members are public by default and do not allow explicit use an access modifier 
    // public void Print();

    // interface cannot contain fields
    //int ID;
}

interface ICustomer30_2
{
    void Print2();
}

// a class can inherit from an interface
// a class and/or struct can inherit from MULTIPLE interfaces at the same time
public class Customer30 : ICustomer30, ICustomer30_2
{
    // when a class inherits from an interface, class must provide implementation for ALL interface members
    // class implementation must have same signature as signature of inferface member 
    public void Print()
    {
        Console.WriteLine("Interface Print Method...");
    }

    // the code below was automatically generated by VS and was not manually entered
    //   right-click the "ICustomer30_2" text in the class statement above
    //   choose "Implement Interface" menu item to generate this code
    public void Print2()
    {
        Console.WriteLine("Interface Print2 Method...");
        // comment out default code generated by VS
        // throw new NotImplementedException();
    }
}

interface ICustomer30_3
{
    void Print3();
}

// an interface inherits from another interface
interface ICustomer30_4 : ICustomer30_3
{
    void Print4();
}

// customer class inherits from an interface that inherits from another interface
// this class must implement all members of all interfaces in interface chain
public class Customer30_2 : ICustomer30_4
{
    public void Print4()
    {
        Console.WriteLine("Interface Print4 Method...");
    }

    // also need to implement Print3() because ICustomer30_4 inherits from ICustomer30_3
    public void Print3()
    {
        Console.WriteLine("Interface Print3 Method...");
    }
}

class Program30
{
    static void Main()
    {
        Customer30 C1 = new Customer30();
        C1.Print();
        C1.Print2();

        Customer30_2 C2 = new Customer30_2();
        C2.Print3();
        C2.Print4();

        // it is not possible to create an instance of an interface and/or an abstract class
        // it makes no sense to do that since interfaces have no code implemented (they are incomplete)
        // ICustomer30_4 IC1 = new ICustomer30_4(); 

        // however, you can to do either of these
        // both of these interfaces are parents of Customer30_2, so inheritance allows us to do this
        ICustomer30_3 IC3 = new Customer30_2(); 
        ICustomer30_4 IC4 = new Customer30_2();

        // IC3 only has access to Print3() method
        IC3.Print3();

        // IC4 has access to both methods
        IC4.Print3();
        IC4.Print4();
    }
}

